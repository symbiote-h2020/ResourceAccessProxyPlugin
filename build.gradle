plugins {
	id 'org.springframework.boot' version '2.2.7.RELEASE'
	id 'java'
    id 'io.franzbecker.gradle-lombok' version '4.0.0'
    id "com.cinnober.gradle.semver-git" version "3.0.0"
    id 'com.github.ben-manes.versions' version '0.28.0' // find new versions of dependency task: dependencyUpdates

    // code quality
    id "jacoco"

    // IDEs
    id "eclipse"
    id "idea"
    
    // publishing
    id "maven"
    id "maven-publish"
	
}

apply plugin: 'io.spring.dependency-management'

ext {
	set('springCloudVersion', 'Hoxton.SR4')
}

group = 'eu.h2020.symbiote'

// this is needed for starter to not create fat jar
//bootRepackage.enabled = false
bootJar {
	enabled = false
	classifier = 'boot'
}

jar {
	enabled = true
    version =  project.version
}

eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}

// adding sources for integrationTests
sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}


allprojects {
    repositories {
        mavenLocal()
        jcenter()
        maven { url "https://jitpack.io" }
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}


dependencies {
    compile('org.springframework.boot:spring-boot-starter')
    compile('org.springframework.boot:spring-boot-starter-amqp')
    //compile('org.hibernate:hibernate-validator')
    
    
    // mavenLocal  
    //compile('eu.h2020.symbiote:SymbIoTeLibraries:5.29.0-SNAPSHOT')
    // jitpack
    compile('com.github.symbiote-h2020:SymbIoTeLibraries:6.0+') { changing = true }
    
    compileOnly('org.projectlombok:lombok')
    testCompileOnly('org.projectlombok:lombok')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.awaitility:awaitility:4.0.2')
    testCompile('com.revinate:assertj-json:1.2.0')
    testCompile('io.arivera.oss:embedded-rabbitmq:1.4.0')
    testCompile('org.springframework.cloud:spring-cloud-contract-wiremock')
    testCompile('com.github.paweladamski:HttpClientMock:1.7.0')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

// creating source jar
task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    version =  project.version
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            
            artifact sourceJar {
                classifier "sources"
            }
        }
    }
    repositories {
        mavenLocal()
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

// jacoco configuration section
jacoco {
    toolVersion = "0.8.5"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

// including code quality extensions into the build
check.dependsOn(jacocoTestReport)

// integration tests
task integrationTest(type: Test) {
    jacoco {
        destinationFile = file("$buildDir/jacoco/integrationTest.exec")
        classDumpDir = file("$buildDir/build/classes/integrationTest")
        includes = ["eu.*"]
    }

    testClassesDirs = sourceSets.integrationTest.output
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

task allTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
}

test {
    jacoco {
        destinationFile = file("$buildDir/jacoco/test.exec")
        classDumpDir = file("$buildDir/build/classes/test")
    }
}

// integration test reporting
task jacocoIntegrationTestReport(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco integration test coverage reports"
 
    reports {
        xml.enabled = true
        xml.destination = file("${buildDir}/reports/jacoco/integrationTest/jacocoIntegrationTest.xml")
        html.enabled = true
        html.destination = file("${buildDir}/reports/jacoco/integrationTest/html")
    }

	executionData(files(["${buildDir}/jacoco/integrationTest.exec"]))
    additionalClassDirs(files("$buildDir/classes/java/integrationTest", "$buildDir/classes/java/main"))
    sourceDirectories.from(sourceSets.main.allJava)
}

jacocoIntegrationTestReport.dependsOn integrationTest
check.dependsOn jacocoIntegrationTestReport

// all tests reporting
task jacocoAllTestReport(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco all test coverage reports"
 
    reports {
        xml.enabled = true
        xml.destination = file("${buildDir}/reports/jacoco/allTest/jacocoAllTest.xml")
        html.enabled = true
        html.destination = file("${buildDir}/reports/jacoco/allTest/html")
    }
 
    executionData(files([
            "${buildDir}/jacoco/integrationTest.exec", 
            "${buildDir}/jacoco/test.exec"]))
    additionalClassDirs(files("$buildDir/classes/java/main", "$buildDir/classes/java/integrationTest", "$buildDir/classes/java/test"))
    sourceDirectories.from(sourceSets.main.allJava)
}
jacocoAllTestReport.dependsOn test, integrationTest
check.dependsOn jacocoAllTestReport


// reports for integration tests in different directory
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

/*
Run only unit tests
> gradle clean test

Run only integration tests
> gradle clean integrationTest

Run all tests
> gradle clean test integrationTest

Run build with all tests
>  gradle clean build

Run build and exclude integration tests
> gradle clean build -x integrationTest

publishing starter to mavenLocal
> gradle clean build publishToMavenLocal
 */
